// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gururuby/shortener/internal/domain/storage/shorturl (interfaces: ShortURLDB)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock.go -package=mocks . ShortURLDB
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/gururuby/shortener/internal/domain/entity/shorturl"
	gomock "go.uber.org/mock/gomock"
)

// MockShortURLDB is a mock of ShortURLDB interface.
type MockShortURLDB struct {
	ctrl     *gomock.Controller
	recorder *MockShortURLDBMockRecorder
	isgomock struct{}
}

// MockShortURLDBMockRecorder is the mock recorder for MockShortURLDB.
type MockShortURLDBMockRecorder struct {
	mock *MockShortURLDB
}

// NewMockShortURLDB creates a new mock instance.
func NewMockShortURLDB(ctrl *gomock.Controller) *MockShortURLDB {
	mock := &MockShortURLDB{ctrl: ctrl}
	mock.recorder = &MockShortURLDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortURLDB) EXPECT() *MockShortURLDBMockRecorder {
	return m.recorder
}

// FindShortURL mocks base method.
func (m *MockShortURLDB) FindShortURL(ctx context.Context, alias string) (*entity.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindShortURL", ctx, alias)
	ret0, _ := ret[0].(*entity.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindShortURL indicates an expected call of FindShortURL.
func (mr *MockShortURLDBMockRecorder) FindShortURL(ctx, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindShortURL", reflect.TypeOf((*MockShortURLDB)(nil).FindShortURL), ctx, alias)
}

// Ping mocks base method.
func (m *MockShortURLDB) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockShortURLDBMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockShortURLDB)(nil).Ping), ctx)
}

// SaveShortURL mocks base method.
func (m *MockShortURLDB) SaveShortURL(ctx context.Context, shortURL *entity.ShortURL) (*entity.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveShortURL", ctx, shortURL)
	ret0, _ := ret[0].(*entity.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveShortURL indicates an expected call of SaveShortURL.
func (mr *MockShortURLDBMockRecorder) SaveShortURL(ctx, shortURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveShortURL", reflect.TypeOf((*MockShortURLDB)(nil).SaveShortURL), ctx, shortURL)
}
