// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gururuby/shortener/internal/domain/storage/user (interfaces: DB)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock.go -package=mocks . DB
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/gururuby/shortener/internal/domain/entity/shorturl"
	entity0 "github.com/gururuby/shortener/internal/domain/entity/user"
	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
	isgomock struct{}
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// FindUser mocks base method.
func (m *MockDB) FindUser(ctx context.Context, id int) (*entity0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", ctx, id)
	ret0, _ := ret[0].(*entity0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockDBMockRecorder) FindUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockDB)(nil).FindUser), ctx, id)
}

// FindUserURLs mocks base method.
func (m *MockDB) FindUserURLs(ctx context.Context, id int) ([]*entity.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserURLs", ctx, id)
	ret0, _ := ret[0].([]*entity.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserURLs indicates an expected call of FindUserURLs.
func (mr *MockDBMockRecorder) FindUserURLs(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserURLs", reflect.TypeOf((*MockDB)(nil).FindUserURLs), ctx, id)
}

// SaveUser mocks base method.
func (m *MockDB) SaveUser(ctx context.Context) (*entity0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx)
	ret0, _ := ret[0].(*entity0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockDBMockRecorder) SaveUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockDB)(nil).SaveUser), ctx)
}
