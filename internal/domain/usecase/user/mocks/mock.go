// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gururuby/shortener/internal/domain/usecase/user (interfaces: UserStorage,Authenticator)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock.go -package=mocks . UserStorage,Authenticator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/gururuby/shortener/internal/domain/entity/shorturl"
	entity0 "github.com/gururuby/shortener/internal/domain/entity/user"
	gomock "go.uber.org/mock/gomock"
)

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
	isgomock struct{}
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// FindURLs mocks base method.
func (m *MockUserStorage) FindURLs(ctx context.Context, userID int) ([]*entity.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindURLs", ctx, userID)
	ret0, _ := ret[0].([]*entity.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindURLs indicates an expected call of FindURLs.
func (mr *MockUserStorageMockRecorder) FindURLs(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindURLs", reflect.TypeOf((*MockUserStorage)(nil).FindURLs), ctx, userID)
}

// FindUser mocks base method.
func (m *MockUserStorage) FindUser(ctx context.Context, userID int) (*entity0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", ctx, userID)
	ret0, _ := ret[0].(*entity0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockUserStorageMockRecorder) FindUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockUserStorage)(nil).FindUser), ctx, userID)
}

// MarkURLAsDeleted mocks base method.
func (m *MockUserStorage) MarkURLAsDeleted(ctx context.Context, userID int, aliases []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkURLAsDeleted", ctx, userID, aliases)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkURLAsDeleted indicates an expected call of MarkURLAsDeleted.
func (mr *MockUserStorageMockRecorder) MarkURLAsDeleted(ctx, userID, aliases any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkURLAsDeleted", reflect.TypeOf((*MockUserStorage)(nil).MarkURLAsDeleted), ctx, userID, aliases)
}

// SaveUser mocks base method.
func (m *MockUserStorage) SaveUser(ctx context.Context) (*entity0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx)
	ret0, _ := ret[0].(*entity0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockUserStorageMockRecorder) SaveUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockUserStorage)(nil).SaveUser), ctx)
}

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
	isgomock struct{}
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// ReadUserID mocks base method.
func (m *MockAuthenticator) ReadUserID(tokenString string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserID", tokenString)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserID indicates an expected call of ReadUserID.
func (mr *MockAuthenticatorMockRecorder) ReadUserID(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserID", reflect.TypeOf((*MockAuthenticator)(nil).ReadUserID), tokenString)
}

// SignUserID mocks base method.
func (m *MockAuthenticator) SignUserID(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUserID", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUserID indicates an expected call of SignUserID.
func (mr *MockAuthenticatorMockRecorder) SignUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUserID", reflect.TypeOf((*MockAuthenticator)(nil).SignUserID), userID)
}
