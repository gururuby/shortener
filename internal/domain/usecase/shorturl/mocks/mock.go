// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gururuby/shortener/internal/domain/usecase/shorturl (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock.go -package=mocks . Storage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/gururuby/shortener/internal/domain/entity/shorturl"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// FindByAlias mocks base method.
func (m *MockStorage) FindByAlias(alias string) (*entity.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAlias", alias)
	ret0, _ := ret[0].(*entity.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAlias indicates an expected call of FindByAlias.
func (mr *MockStorageMockRecorder) FindByAlias(alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAlias", reflect.TypeOf((*MockStorage)(nil).FindByAlias), alias)
}

// Save mocks base method.
func (m *MockStorage) Save(sourceURL string) (*entity.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", sourceURL)
	ret0, _ := ret[0].(*entity.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockStorageMockRecorder) Save(sourceURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorage)(nil).Save), sourceURL)
}
