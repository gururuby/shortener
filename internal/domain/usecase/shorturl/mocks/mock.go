// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gururuby/shortener/internal/domain/usecase/shorturl (interfaces: ShortURLStorage)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock.go -package=mocks . ShortURLStorage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/gururuby/shortener/internal/domain/entity/shorturl"
	entity0 "github.com/gururuby/shortener/internal/domain/entity/user"
	gomock "go.uber.org/mock/gomock"
)

// MockShortURLStorage is a mock of ShortURLStorage interface.
type MockShortURLStorage struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockShortURLStorageMockRecorder
}

// MockShortURLStorageMockRecorder is the mock recorder for MockShortURLStorage.
type MockShortURLStorageMockRecorder struct {
	mock *MockShortURLStorage
}

// NewMockShortURLStorage creates a new mock instance.
func NewMockShortURLStorage(ctrl *gomock.Controller) *MockShortURLStorage {
	mock := &MockShortURLStorage{ctrl: ctrl}
	mock.recorder = &MockShortURLStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortURLStorage) EXPECT() *MockShortURLStorageMockRecorder {
	return m.recorder
}

// FindShortURL mocks base method.
func (m *MockShortURLStorage) FindShortURL(ctx context.Context, alias string) (*entity.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindShortURL", ctx, alias)
	ret0, _ := ret[0].(*entity.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindShortURL indicates an expected call of FindShortURL.
func (mr *MockShortURLStorageMockRecorder) FindShortURL(ctx, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindShortURL", reflect.TypeOf((*MockShortURLStorage)(nil).FindShortURL), ctx, alias)
}

// SaveShortURL mocks base method.
func (m *MockShortURLStorage) SaveShortURL(ctx context.Context, user *entity0.User, sourceURL string) (*entity.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveShortURL", ctx, user, sourceURL)
	ret0, _ := ret[0].(*entity.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveShortURL indicates an expected call of SaveShortURL.
func (mr *MockShortURLStorageMockRecorder) SaveShortURL(ctx, user, sourceURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveShortURL", reflect.TypeOf((*MockShortURLStorage)(nil).SaveShortURL), ctx, user, sourceURL)
}
