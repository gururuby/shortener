// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gururuby/shortener/internal/domain/usecase/app (interfaces: DAO)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock.go -package=mocks . DAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDAO is a mock of DAO interface.
type MockDAO struct {
	ctrl     *gomock.Controller
	recorder *MockDAOMockRecorder
	isgomock struct{}
}

// MockDAOMockRecorder is the mock recorder for MockDAO.
type MockDAOMockRecorder struct {
	mock *MockDAO
}

// NewMockDAO creates a new mock instance.
func NewMockDAO(ctrl *gomock.Controller) *MockDAO {
	mock := &MockDAO{ctrl: ctrl}
	mock.recorder = &MockDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDAO) EXPECT() *MockDAOMockRecorder {
	return m.recorder
}

// IsDBReady mocks base method.
func (m *MockDAO) IsDBReady() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDBReady")
	ret0, _ := ret[0].(error)
	return ret0
}

// IsDBReady indicates an expected call of IsDBReady.
func (mr *MockDAOMockRecorder) IsDBReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDBReady", reflect.TypeOf((*MockDAO)(nil).IsDBReady))
}
