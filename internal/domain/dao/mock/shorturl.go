// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/usecase/shorturl.go
//
// Generated by this command:
//
//      mockgen -source=internal/domain/usecase/shorturl.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockshortURLDAO is a mock of shortURLDAO interface.
type MockshortURLDAO struct {
	ctrl     *gomock.Controller
	recorder *MockshortURLDAOMockRecorder
	isgomock struct{}
}

// MockshortURLDAOMockRecorder is the mock recorder for MockshortURLDAO.
type MockshortURLDAOMockRecorder struct {
	mock *MockshortURLDAO
}

// NewMockshortURLDAO creates a new mock instance.
func NewMockshortURLDAO(ctrl *gomock.Controller) *MockshortURLDAO {
	mock := &MockshortURLDAO{ctrl: ctrl}
	mock.recorder = &MockshortURLDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockshortURLDAO) EXPECT() *MockshortURLDAOMockRecorder {
	return m.recorder
}

// FindByAlias mocks base method.
func (m *MockshortURLDAO) FindByAlias(alias string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAlias", alias)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAlias indicates an expected call of FindByAlias.
func (mr *MockshortURLDAOMockRecorder) FindByAlias(alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAlias", reflect.TypeOf((*MockshortURLDAO)(nil).FindByAlias), alias)
}

// Save mocks base method.
func (m *MockshortURLDAO) Save(sourceURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", sourceURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockshortURLDAOMockRecorder) Save(sourceURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockshortURLDAO)(nil).Save), sourceURL)
}
