// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gururuby/shortener/internal/handler/http/app (interfaces: AppUseCase)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock.go -package=mocks . AppUseCase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAppUseCase is a mock of AppUseCase interface.
type MockAppUseCase struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockAppUseCaseMockRecorder
}

// MockAppUseCaseMockRecorder is the mock recorder for MockAppUseCase.
type MockAppUseCaseMockRecorder struct {
	mock *MockAppUseCase
}

// NewMockAppUseCase creates a new mock instance.
func NewMockAppUseCase(ctrl *gomock.Controller) *MockAppUseCase {
	mock := &MockAppUseCase{ctrl: ctrl}
	mock.recorder = &MockAppUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppUseCase) EXPECT() *MockAppUseCaseMockRecorder {
	return m.recorder
}

// PingDB mocks base method.
func (m *MockAppUseCase) PingDB(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDB", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingDB indicates an expected call of PingDB.
func (mr *MockAppUseCaseMockRecorder) PingDB(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDB", reflect.TypeOf((*MockAppUseCase)(nil).PingDB), ctx)
}
