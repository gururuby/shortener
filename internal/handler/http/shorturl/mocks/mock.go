// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gururuby/shortener/internal/handler/http/shorturl (interfaces: ShortURLUseCase)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock.go -package=mocks . ShortURLUseCase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/gururuby/shortener/internal/domain/entity/shorturl"
	gomock "go.uber.org/mock/gomock"
)

// MockShortURLUseCase is a mock of ShortURLUseCase interface.
type MockShortURLUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockShortURLUseCaseMockRecorder
	isgomock struct{}
}

// MockShortURLUseCaseMockRecorder is the mock recorder for MockShortURLUseCase.
type MockShortURLUseCaseMockRecorder struct {
	mock *MockShortURLUseCase
}

// NewMockShortURLUseCase creates a new mock instance.
func NewMockShortURLUseCase(ctrl *gomock.Controller) *MockShortURLUseCase {
	mock := &MockShortURLUseCase{ctrl: ctrl}
	mock.recorder = &MockShortURLUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortURLUseCase) EXPECT() *MockShortURLUseCaseMockRecorder {
	return m.recorder
}

// BatchShortURLs mocks base method.
func (m *MockShortURLUseCase) BatchShortURLs(urls []entity.BatchShortURLInput) []entity.BatchShortURLOutput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchShortURLs", urls)
	ret0, _ := ret[0].([]entity.BatchShortURLOutput)
	return ret0
}

// BatchShortURLs indicates an expected call of BatchShortURLs.
func (mr *MockShortURLUseCaseMockRecorder) BatchShortURLs(urls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchShortURLs", reflect.TypeOf((*MockShortURLUseCase)(nil).BatchShortURLs), urls)
}

// CreateShortURL mocks base method.
func (m *MockShortURLUseCase) CreateShortURL(sourceURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortURL", sourceURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShortURL indicates an expected call of CreateShortURL.
func (mr *MockShortURLUseCaseMockRecorder) CreateShortURL(sourceURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortURL", reflect.TypeOf((*MockShortURLUseCase)(nil).CreateShortURL), sourceURL)
}

// FindShortURL mocks base method.
func (m *MockShortURLUseCase) FindShortURL(alias string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindShortURL", alias)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindShortURL indicates an expected call of FindShortURL.
func (mr *MockShortURLUseCaseMockRecorder) FindShortURL(alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindShortURL", reflect.TypeOf((*MockShortURLUseCase)(nil).FindShortURL), alias)
}
