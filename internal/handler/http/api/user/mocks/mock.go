// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gururuby/shortener/internal/handler/http/api/user (interfaces: UserUseCase)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock.go -package=mocks . UserUseCase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/gururuby/shortener/internal/domain/entity/user"
	usecase "github.com/gururuby/shortener/internal/domain/usecase/user"
	gomock "go.uber.org/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
	isgomock struct{}
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockUserUseCase) Authenticate(ctx context.Context, token string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, token)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockUserUseCaseMockRecorder) Authenticate(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockUserUseCase)(nil).Authenticate), ctx, token)
}

// GetURLs mocks base method.
func (m *MockUserUseCase) GetURLs(ctx context.Context, user *entity.User) ([]*usecase.UserShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLs", ctx, user)
	ret0, _ := ret[0].([]*usecase.UserShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLs indicates an expected call of GetURLs.
func (mr *MockUserUseCaseMockRecorder) GetURLs(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLs", reflect.TypeOf((*MockUserUseCase)(nil).GetURLs), ctx, user)
}

// Register mocks base method.
func (m *MockUserUseCase) Register(ctx context.Context) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserUseCaseMockRecorder) Register(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserUseCase)(nil).Register), ctx)
}
