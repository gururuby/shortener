// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gururuby/shortener/internal/handler/http/api/internal (interfaces: StatsUseCase)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock.go -package=mocks . StatsUseCase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/gururuby/shortener/internal/domain/entity/stats"
	gomock "go.uber.org/mock/gomock"
)

// MockStatsUseCase is a mock of StatsUseCase interface.
type MockStatsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockStatsUseCaseMockRecorder
	isgomock struct{}
}

// MockStatsUseCaseMockRecorder is the mock recorder for MockStatsUseCase.
type MockStatsUseCaseMockRecorder struct {
	mock *MockStatsUseCase
}

// NewMockStatsUseCase creates a new mock instance.
func NewMockStatsUseCase(ctrl *gomock.Controller) *MockStatsUseCase {
	mock := &MockStatsUseCase{ctrl: ctrl}
	mock.recorder = &MockStatsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsUseCase) EXPECT() *MockStatsUseCaseMockRecorder {
	return m.recorder
}

// GetStats mocks base method.
func (m *MockStatsUseCase) GetStats(ctx context.Context) (*entity.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx)
	ret0, _ := ret[0].(*entity.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockStatsUseCaseMockRecorder) GetStats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockStatsUseCase)(nil).GetStats), ctx)
}
