// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gururuby/shortener/internal/infra/db/postgresql (interfaces: PGDBPool)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock.go -package=mocks . PGDBPool
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	gomock "go.uber.org/mock/gomock"
)

// MockPGDBPool is a mock of PGDBPool interface.
type MockPGDBPool struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockPGDBPoolMockRecorder
}

// MockPGDBPoolMockRecorder is the mock recorder for MockPGDBPool.
type MockPGDBPoolMockRecorder struct {
	mock *MockPGDBPool
}

// NewMockPGDBPool creates a new mock instance.
func NewMockPGDBPool(ctrl *gomock.Controller) *MockPGDBPool {
	mock := &MockPGDBPool{ctrl: ctrl}
	mock.recorder = &MockPGDBPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPGDBPool) EXPECT() *MockPGDBPoolMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockPGDBPool) Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockPGDBPoolMockRecorder) Exec(ctx, sql any, arguments ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPGDBPool)(nil).Exec), varargs...)
}

// Ping mocks base method.
func (m *MockPGDBPool) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPGDBPoolMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPGDBPool)(nil).Ping), ctx)
}

// Query mocks base method.
func (m *MockPGDBPool) Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockPGDBPoolMockRecorder) Query(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPGDBPool)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockPGDBPool) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockPGDBPoolMockRecorder) QueryRow(ctx, sql any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockPGDBPool)(nil).QueryRow), varargs...)
}
