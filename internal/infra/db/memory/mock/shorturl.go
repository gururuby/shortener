// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/dao/shorturl.go
//
// Generated by this command:
//
//      mockgen -source=internal/domain/dao/shorturl.go
//

// Package mock_dao is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockshortURLDB is a mock of shortURLDB interface.
type MockshortURLDB struct {
	ctrl     *gomock.Controller
	recorder *MockshortURLDBMockRecorder
	isgomock struct{}
}

// MockshortURLDBMockRecorder is the mock recorder for MockshortURLDB.
type MockshortURLDBMockRecorder struct {
	mock *MockshortURLDB
}

// NewMockshortURLDB creates a new mock instance.
func NewMockshortURLDB(ctrl *gomock.Controller) *MockshortURLDB {
	mock := &MockshortURLDB{ctrl: ctrl}
	mock.recorder = &MockshortURLDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockshortURLDB) EXPECT() *MockshortURLDBMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockshortURLDB) Find(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockshortURLDBMockRecorder) Find(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockshortURLDB)(nil).Find), arg0)
}

// Save mocks base method.
func (m *MockshortURLDB) Save(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockshortURLDBMockRecorder) Save(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockshortURLDB)(nil).Save), arg0)
}
